type Pool @entity {
  " Smart contract address of the pool "
  id: ID!

  " Creation timestamp "
  createdTimestamp: BigInt!

  " Creation block number "
  createdBlock: BigInt!

  " All positions in this market "
  positions: [Position!]! @derivedFrom(field: "pool")
}

type Account @entity {
  " { Account address } "
  id: ID!

  " Total liquidity rewards claimed by this account"
  rewardsClaimed: BigInt

  " All positions that belong to this account "
  positions: [Position!]! @derivedFrom(field: "owner")
}

type Position @entity {
  "NonfungiblePositionManager tokenId"
  id: ID!

  " Creation timestamp "
  createdTimestamp: BigInt!

  " Creation block number "
  createdBlock: BigInt!

  " Account that owns this position (staker contract is ignored, so its always the account that held it most recently other than the staker)"
  owner: Account! @index

  " The liquidity pool in which this position was opened "
  pool: Pool! @index

  " The amount of liquidity tokens in this position "
  liquidity: BigInt!

  " The amount of token0 in this position "
  amount0: BigInt!

  " The amount of token1 in this position "
  amount1: BigInt!

  " Whether this position is staked in a reward program"
  isStaked: Boolean @index

  " Whether this position is currently being held by the staker contract. This doesn't necessarily mean that the position is staked."
  isHeldByStaker: Boolean @index
}
